documentation: |
  MLS Spanish (no P&C)
  ####################

  TBD

# user can specify which processors should be run
# can be either "all" to run all processors,
# or any Python "slice" object, e.g.,
# ":3" (to select first 3 objects),
# ":-1" (to select all but last)
# "2:5" (to select 3rd to 5th)
# "0" (to select only the first processor)
processors_to_run: all
data_split: ???
workspace_dir: ???
final_manifest: ???

processors:
  - _target_: sdp.processors.CreateInitialManifestMLS
    output_manifest_file: "${workspace_dir}/mls_spanish_processed/${data_split}_manifest.json"
    raw_data_dir: ${workspace_dir}
    language: spanish
    resampled_audio_dir: "${workspace_dir}/mls_spanish_processed/${data_split}/audio/"
    data_split: "${data_split}"

  - _target_: sdp.processors.ASRInference
    output_manifest_file: "${workspace_dir}/processed_manifests/stt_es_quartznet15x5_${data_split}.json"
    pretrained_model: "stt_es_quartznet15x5"

  - _target_: sdp.processors.SubRegex
    regex_params_list:
      - {"pattern": "'", "repl": ""} # so that e.g. "d'artagnan" becomes "dartagnan", not "d artagnan"

      - {"pattern": ' sr ', "repl": ' señor '}
      - {"pattern": ' vd ', "repl": ' usted '}
      - {"pattern": ' vds ', "repl": ' ustedes '}
      - {"pattern": ' vdes ', "repl": ' ustedes '}
      - {"pattern": ' v md ', "repl": ' vuestra merced '}
      - {"pattern": ' mr ', "repl": ' mister '}
      - {"pattern": ' ud ', "repl": ' un '} # technically can be ustedes, but I have only seen it being 'un'

      - {"pattern": ' guando ', "repl": ' cuando '}
      - {"pattern": ' magestad ', "repl": ' majestad '}

      - {"pattern": ' á ', "repl": ' a '}
      - {"pattern": ' ó ', "repl": ' o '}
      - {"pattern": ' é ', "repl": ' e '}
      - {"pattern": ' ú ', "repl": ' u '}
      - {"pattern": ' fué ', "repl": ' fue '}
      - {"pattern": ' sólo ', "repl": ' solo '}
      - {"pattern": ' dió ', "repl": ' dio '}
      - {"pattern": ' hácia ', "repl": ' hacia '}
      - {"pattern": ' jóven ', "repl": ' joven '}

      # tried to make reasonable approximations:
      - {"pattern": ' dixo ', "repl" : ' dijo '}
      - {"pattern": ' dixe ', "repl" : ' dije '}
      - {"pattern": ' dixéramos ', "repl" : ' dijéramos '}

      - {"pattern": ' dixeron ', "repl" : ' dijeron '}
      - {"pattern": ' dixéron ', "repl": ' dijéron '}
      - {"pattern": ' dixese ', "repl": ' dijese '}
      - {"pattern": ' dixesen ', "repl":' dijesen'}   ### bug
      - {"pattern": ' dixesemos ', "repl":' dijesemos'} ### bug
      - {"pattern": ' diximos ', "repl":' dijimos '}
      - {"pattern": ' dixere ', "repl":' dijere '}
      - {"pattern": ' dixera ', "repl":' dijera '}

      - {"pattern": ' algun ', "repl":' algún '}
      - {"pattern": ' alli ', "repl":' allí '}
      - {"pattern": ' aqui ', "repl":' aquí '}
      - {"pattern": ' asi ', "repl":' así '}
      - {"pattern": ' atencion ', "repl":' atención '}
      - {"pattern": ' capitan ', "repl":' capitán '}
      - {"pattern": ' corazon ', "repl":' corazón '}
      - {"pattern": ' debia ', "repl":' debía '}
      - {"pattern": ' decia ', "repl":' decía '}
      - {"pattern": ' decian ', "repl":' decían '}
      - {"pattern": ' demas ', "repl":' demás '}
      - {"pattern": ' despues ', "repl":' después '}
      - {"pattern": ' dia ', "repl":' día '}
      - {"pattern": ' dias ', "repl":' días '}
      - {"pattern": ' habeis ', "repl":' habéis '}
      - {"pattern": ' habia ', "repl":' había '}
      - {"pattern": ' habian ', "repl":' habían '}
      - {"pattern": ' habitacion ', "repl":' habitación '}
      - {"pattern": ' habria ', "repl":' habría '}
      - {"pattern": ' hacian ', "repl":' hacían '}
      - {"pattern": ' mio ', "repl":' mío '}
      - {"pattern": ' ningun ', "repl":' ningún '}
      - {"pattern": ' ocasion ', "repl":' ocasión '}
      - {"pattern": ' oir ', "repl":' oír '}
      - {"pattern": ' pais ', "repl":' país '}
      - {"pattern": ' parecia ', "repl":' parecía '}
      - {"pattern": ' podia ', "repl":' podía '}
      - {"pattern": ' podian ', "repl":' podían '}
      - {"pattern": ' podria ', "repl":' podría '}
      - {"pattern": ' queria ', "repl":' quería '}
      - {"pattern": ' razon ', "repl":' razón '}
      - {"pattern": ' segun ', "repl":' según '}
      - {"pattern": ' tambien ', "repl":' también '}
      - {"pattern": ' tenia ', "repl":' tenía '}
      - {"pattern": ' tenian ', "repl":' tenían '}
      - {"pattern": ' velazquez ', "repl":' velázquez '}
      - {"pattern": ' venian ', "repl":' venían '}

    test_cases:
      - {input: {text: "á las dos"}, output: {text: "a las dos"}}

  - _target_: sdp.processors.SubRegex
    regex_params_list:
      - {"pattern": '[\.\-\‐\‑\–\—\―\"\$\&]', "repl": " "}
      - {"pattern": "['']", "repl": " "}
      - {"pattern": '[\,\,\:\=\?\_\`\{\|\}\~\¨\ª]', "repl": " "}
      - {"pattern": '[\«\°\´\·\»\¿\‘\’\“\”\„\…\‧\‹\›\≪\≫\!]', "repl": " "}
      - {"pattern": '[\:\;\`\ʻ\ː\‘\’\“\→\"\%\‘\”\�\ʽ\ʿ]', "repl": " "}
      - {"pattern": '́', "repl": " "} #used for putting stress on Russian letters
      - {"pattern": '̇', "repl": " "}
      - {"pattern": 'content from google book search google book search generated at ', "repl": " "}
      - {"pattern": 'content from google book search generated at ', "repl": " "}
      - {"pattern": 'content from ', "repl": " "}
      - {"pattern": 'google book search generated at ', "repl": " "}
      - {"pattern": 'search generated at ', "repl": " "}
      - {"pattern": 'content from google ', "repl": " "}
      - {"pattern": 'content from google book search ', "repl": " "}
      - {"pattern": 'content from google book search generated at content from google book search generated at ', "repl": " "}
      - {"pattern": 'book search generated at ', "repl": " "}
      - {"pattern": 'content from google book ', "repl": " "}
      - {"pattern": 'generated at ', "repl": " "}
      - {"pattern": 'generated at content from google book search generated at ', "repl": " "}
      - {"pattern": 'at content from google book search generated at ', "repl": " "}
      - {"pattern": 'from google book search generated at ', "repl": " "}
      - {"pattern": 'content from google book search content from google book search generated at ', "repl": " "}
      - {"pattern": 'content from google book search generated at content from google book search generated at content from google book search generated at ', "repl": " "}

    test_cases:
      - {input: {text: "abc, def."}, output: {text: "abc def"}}
      - {input: {text: "abc! def."}, output: {text: "abc def"}}

  - _target_: sdp.processors.DropNonAlphabet
    alphabet: " abcdefghijklmnopqrstuvwxyzáéíñóúü"
    test_cases:
      - {input: {text: "test тест 测试"}, output: null}
      - {input: {text: "test"}, output: {text: "test"}}

  - _target_: dataset_configs.spanish.mls.unique_processors.clean_roman_numerals.CleanRomanNumerals
    king_triggers: [
      "alfonso",
      "benedicto",
      "carlos",
      "clemente",
      "enrique",
      "federico",
      "felipe",
      "fernando",
      "filipo",
      "gregorio",
      "guillermo",
      "jaime",
      "jorge",
      "león",
      "luis",
      "pie",
      "tomo",
    ]
    queen_triggers: ["isabel"]
    ordinal_masc_triggers: ["capítulo"]
    ordinal_fem_triggers: [
      "parte",
      "escena",
    ]
    cardinal_triggers: [
      "siglo",
      "carta",
      "libro",
      "número",
    ]
    test_cases:
      - {input: {text: "número i"}, output: {text: "número uno"}}

  - _target_: sdp.processors.DropIfRegexMatch
    regex_patterns:
      - "(\\D ){5,20}" # looks for between 4 and 19 characters surrounded by spaces

    test_cases:
      - {input: {text: "some s p a c e d out letters"}, output: null}
      - {input: {text: "normal words only"}, output: {text: "normal words only"}}
      - {input: {text: "three a b c spaced out letters"}, output: {text: "three a b c spaced out letters"}}
      - {input: {text: "four a b c d spaced out letters"}, output: null}

  - _target_: sdp.processors.DropIfRegexMatch
    text_key: "audio_filepath"
    regex_patterns: [
          # books with lots of OCR errors etc.
          "8882/10372",
          "8882/11576",
          "10246/11643",
          "9972/11767",
          "9972/12090",
          "9972/12260",
          "10246/12300",
          "10246/12585",
          "12689/12700",
          "12341/12700",
          "8882/12700",
          "12953/12700",
          "12428/12700",
          "12921/12700",
          "11797/12700",
          "9972/12705",
          "11797/13121",
          "11797/13497",
          "10246/13672",
          "12367/14286",
          "10246/14708",
          "11048/9310",
          "6447/9310",
          "11040/9310",
          "9063/9310",
          "9972/9503",
          "8060/9503",
    ]

    test_cases:
      - {input: {audio_filepath: "/path/10246/12585/abc.wav"}, output: null}
      - {input: {audio_filepath: "/path/1/1/abc.wav"}, output: {audio_filepath: "/path/1/1/abc.wav"}}

  - _target_: sdp.processors.DropHighLowCharrate
    high_charrate_threshold: 20
    low_charrate_threshold: 5
    test_cases:
      - {input: {text: "buenos dias", duration: 0.1}, output: null}
      - {input: {text: "buenos dias", duration: 30}, output: null}
      - {input: {text: "buenos dias", duration: 1}, output: {text: "buenos dias", duration: 1}}


  - _target_: sdp.processors.DropIfSubstringInInsertion
    substrings_in_insertion: [
      "uno ",  "dos ", "tres ", "cuatro ", "cinco ",
      "seis ", "siete ", "ocho ", "nueve ", "diez ",
      "once ", "doce ", "trece ", "catorce ", "quince ",
      "veinte ", "treinta ", "cuarenta ", "cincuenta ",
      "sesenta ", "setenta ", "ochenta ", "noventa ",
      "cien ", "ciento", "cientos ", "mil "
    ]
    test_cases:
      - {input: {text: "el de junio", pred_text: "el diez de junio"}, output: null}
      - {input: {text: "el diez de junio", pred_text: "el diez de junio"}, output: {text: "el diez de junio", pred_text: "el diez de junio"}}

  - _target_: sdp.processors.DropIfRegexMatch
    text_key: "pred_text"
    regex_patterns: [
      'librewox', 'librevox', 'librivox', 'libribox', 'libriebox', 'libriboux',
      ' grabado por ',
    ]
    test_cases:
      - {input: {pred_text: "librivox recording"}, output: null}
      - {input: {pred_text: "abcdef"}, output: {pred_text: "abcdef"}}

  - _target_: sdp.processors.DropASRErrorBeginningEnd
    beginning_error_char_threshold: 10
    end_error_char_threshold: 10
    test_cases:
      - {input: {text: "sí hola", pred_text: "abcdefabcdef sí hola"}, output: null}
      - {input: {text: "abcdefabcdef sí hola", pred_text: "sí hola"}, output: null}
      - { input: {text: "abcdefabcdef sí hola", pred_text: "uvwxyzuvwxyz sí hola"},
         output: {text: "abcdefabcdef sí hola", pred_text: "uvwxyzuvwxyz sí hola"}}

  - _target_: sdp.processors.DropHighWER
    wer_threshold: 90
    test_cases:
      - {input: {text: "sí hola", pred_text: "abcdefgh abcdefgh"}, output: null}
      - {input: {text: "sí hola", pred_text: "sí hola"}, output: {text: "sí hola", pred_text: "sí hola"}}

  - _target_: sdp.processors.DropHighCER
    output_manifest_file: "${workspace_dir}/processed_manifests/processed_${data_split}.json"
    cer_threshold: 90
    test_cases:
      - {input: {text: "sí hola", pred_text: "abcdefgh abcdefgh"}, output: null}
      - {input: {text: "sí hola", pred_text: "sí hola"}, output: {text: "sí hola", pred_text: "sí hola"}}

  - _target_: sdp.processors.KeepOnlySpecifiedFields
    input_manifest_file: "${workspace_dir}/processed_manifests/processed_${data_split}.json"
    output_manifest_file: ${final_manifest}
    fields_to_keep:
      - "audio_filepath"
      - "text"
      - "duration"