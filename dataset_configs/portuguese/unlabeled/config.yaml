documentation: |
  Unlabeled Data Processing Pipeline
  ##################################

  This pipeline processes unlabeled data for iterative pseudo-labeling training.

  The pipeline performs the following steps:
  1. Creates an initial manifest by searching for all WAV files in the `raw_data_dir` folder.
  2. Counts the duration of each WAV file.
  3. Identifies the language using the `langid_ambernet` NeMo model.
  4. Filters out audios that are tagged with a different language.
  5. Filters out audios that are too long to be processed.
  6. Applies the VAD algorithm from the NeMo repository.
  7. Forms segments by joining adjacent segments up to a duration threshold.
  8. Splits long audios into shorter segments.
  9. Removes empty files and extra fields from the manifest.

  **Required inputs**:
    - `workspace_dir`: Directory for intermediate files, containing the following subfolders:
    - `${workspace_dir}/wavs/` - Folder with source long files.
    - `${workspace_dir}/sdp/` - Folder to store manifests.
    - `${workspace_dir}/sdp/vad/` - Folder to store temporary files from the VAD algorithm.
    - `${workspace_dir}/splited_wavs/` - Folder to store split short files.

  - `language_short`: Two-letter language code.
  - `nemo_path`: Path to NeMo installation.
  - `final_manifest`: Path to the final output manifest.

processors_to_run: "0:"
workspace_dir: ???
manifest_dir: ${workspace_dir}/sdp
language_short: pt
nemo_path: ??? 
final_manifest: ${manifest_dir}/final_manifest.json

processors:
  - _target_: sdp.processors.CreateInitialManifestByExt
    raw_data_dir: ${workspace_dir}/wavs
    extension: wav
    output_file_key: audio_filepath
    output_manifest_file: ${manifest_dir}/manifest0.json

  - _target_: sdp.processors.GetAudioDuration
    audio_filepath_key: audio_filepath
    duration_key: duration
    output_manifest_file: ${manifest_dir}/manifest1.json

  - _target_: sdp.processors.AudioLid
    output_manifest_file: ${manifest_dir}/manifest2.json
    input_audio_key: audio_filepath
    output_lang_key: audio_lang
    should_run: False
    device: cuda
    pretrained_model: "langid_ambernet"
    segment_duration: 20
    num_segments: 3

  - _target_: sdp.processors.PreserveByValue
    output_manifest_file: ${manifest_dir}/manifest3.json
    input_value_key: audio_lang
    should_run: False
    target_value: ${language_short}

  - _target_: sdp.processors.PreserveByValue
    output_manifest_file: ${manifest_dir}/manifest4.json
    input_value_key: duration
    operator: le
    target_value: 20000.0
  
  - _target_: sdp.processors.Subprocess
    cmd: 'rm -rf ${manifest_dir}/vad/*'
     
  - _target_: sdp.processors.Subprocess
    input_manifest_file: ${manifest_dir}/manifest4.json
    output_manifest_file: ${manifest_dir}/vad
    input_manifest_arg: "manifest_filepath"
    output_manifest_arg: "output_dir"
    cmd: 'python sdp/processors/inference/asr/nemo/utils/speech_to_text_with_vad.py audio_type=wav vad_model=vad_multilingual_frame_marblenet  vad_config=sdp/processors/inference/asr/nemo/utils/frame_vad_infer_postprocess.yaml'

  - _target_: sdp.processors.RenameFields
    input_manifest_file: ${manifest_dir}/vad/temp_manifest_vad_rttm-onset0.3-offset0.3-pad_onset0.2-pad_offset0.2-min_duration_on0.2-min_duration_off0.2-filter_speech_firstTrue.json
    output_manifest_file: ${manifest_dir}/manifest7.json
    rename_fields: {"audio_filepath":"source_filepath"}

  - _target_: sdp.processors.GetRttmSegments
    output_manifest_file: ${manifest_dir}/manifest8.json
    rttm_key: rttm_file
    output_file_key: audio_segments
    duration_key: duration
    duration_threshold: 20.0

  - _target_: sdp.processors.SplitAudioFile
    output_manifest_file: ${manifest_dir}/manifest9.json
    splited_audio_dir: ${workspace_dir}/splited_wavs/
    segments_key: audio_segments
    duration_key: duration
    input_file_key: source_filepath
    output_file_key: audio_filepath

  - _target_: sdp.processors.PreserveByValue
    output_manifest_file: ${manifest_dir}/manifest10.json
    input_value_key: duration
    operator: gt
    target_value: 0.0

  - _target_: sdp.processors.KeepOnlySpecifiedFields
    output_manifest_file: ${final_manifest}
    fields_to_keep: ["audio_filepath", "duration"]