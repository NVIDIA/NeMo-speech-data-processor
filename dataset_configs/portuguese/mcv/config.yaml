documentation: |
  MCV Portuguese
  ##############

  This config was originally designed for the
  `Mozilla Common Voice (MCV) <https://commonvoice.mozilla.org/>`_ dataset
  15.0 release, but should work for any subsequent releases as well.

  It performs the following data processing.

  1. Extracts and converts all data to the NeMo format.
  2. Replaces certain non-supported characters, abbreviations and  punctuation marks with equivalent supported versions.
  3. Drops any data that contains high/low character occurence.
  4. Drops any data that contains symbols not in the supported alphabet.

  **Required arguments**.

  * **workspace_dir**: specify the workspace folder where all audio files will be stored.
    You need to manually place the downloaded MCV Portuguese data inside
    ``<workspace dir>/raw_data/`` subfolder.
  * **data_split**: should be "train", "dev" or "test".

  **Output format**.

  This config dumps the final manifest at ``${workspace_dir}/${data_split}_manifest.json``.
  The output manifest contains the following fields:

  * **audio_filepath (str)**: relative path to the audio files.
  * **text (str)**: transcription, including punctuation ".,?" and capitalization.
  * **duration (float)**: audio duration in seconds.



processors_to_run: all
workspace_dir: ???
data_split: ???
final_manifest: ???


processors:
  - _target_: sdp.processors.CreateInitialManifestMCV
    raw_data_dir: ${workspace_dir}/raw_data
    extract_archive_dir: ${workspace_dir}/raw
    resampled_audio_dir: ${workspace_dir}/${data_split}/audio
    data_split: ${data_split}
    language_id: pt
    output_manifest_file: ${workspace_dir}/${data_split}_manifest0.json
  
  - _target_: sdp.processors.SubRegex
    regex_params_list:
      - {"pattern": '[\-\‐\‑\–\—\―\"]', "repl": " "}
      - {"pattern": "'", "repl": " "}
      - {"pattern": '[\$\&\¡\(\)]', "repl": " "}
      - {"pattern": '[\«\°\´\·\»]', "repl": " "}
      - {"pattern": '[\«\°\´\·\»]', "repl": " "}
      - {"pattern": '[\‘\’\“\”\„]', "repl": " "}
      - {"pattern": '[\:\;\`\ʻ]', "repl": " "}
      - {"pattern": "!", "repl": "."}
      - {"pattern": "…\\s$", "repl": "."} # '\\s' is to to account for the fact that SDP insert spaces at start and end
      - {"pattern": "\\.{2,20}\\s$", "repl": "."} # '\\s' is to to account for the fact that SDP insert spaces at start and end

      # remove remaining repeated periods since most of the time they are unnecessary in this data
      - {"pattern": "\\.{2,20}", "repl": " "}

      - {"pattern": " ([Pp])rofa ", "repl" : ' \1rofessora '}
      - {"pattern": " ([Ss])ra.", "repl" : ' \1enhora'}
      - {"pattern": " ([Ss])rta.", "repl": '\1enhorita'}
      - {"pattern": " ([Ss])r.", 'repl': '\1enhor' }
      - {"pattern": " ([Dd])r ", "repl" : ' \1octor '}
      - {"pattern": " ([Dd])r.", "repl" : ' \1octor '}
      - {"pattern": " ([Dd])ra ", "repl" : ' \1octora '}

      - {"pattern": " um km ", "repl" : " um quilômetro "}
      - {"pattern": " km ", "repl" : " quilômetros "}
  
  - _target_: sdp.processors.DropHighLowCharrate
    high_charrate_threshold: 21
    low_charrate_threshold: 1
  
  - _target_: sdp.processors.DropHighLowDuration
    high_duration_threshold: 16
    low_duration_threshold: 1

  - _target_: sdp.processors.DropNonAlphabet
    output_manifest_file: ${final_manifest}
    alphabet: " ÁÃÀÂÇÉÊÍÕÓÔÚÜáãàâçéêíõóôúüABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz,.?"

