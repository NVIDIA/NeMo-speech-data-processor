documentation: |
  Massive Arabic Speech Corpus (MASC)
  ################
  Dataset must be downloaded manually prior.

  The config performs the following data processing.

  1. Replaces certain non-supported characters, abbreviations and  punctuation marks with equivalent supported versions.
  2. Drops any data that contains high/low character occurence.
  3. Drops any data that contains symbols not in the supported alphabet.

  **Required arguments**.

  * **dataset_dir**: path to the dataset.
  * **workspace_dir**: specify the workspace folder where all audio files will be stored.
  * **data_split**: should be "clean_train", "clean_dev", "clean_test" or "noisy_train", "noisy_dev", "noisy_test".
  * **keep_pc**: specify whether to keep punctuation or not. Should be "True" or "False".
  * **keep_diacr**: specify whether to keep diacritics or not. Should be "True" or "False".
  * **min_duration**: minimal duration of segment in seconds. Defaults to 0.1s.
  * **max_duration**: maximal duration of segment in seconds. Defaults to 20s.
  * **min_wordrate**: minimal wordrate. Defaults to 0.8.
  * **max_wordrate**: maximal wordrate. Defaults to 3.

  **Output format**.

  This config dumps the final manifest at ``${workspace_dir}/manifest0.json`` and wav files ``${workspace_dir}/audios``.
  The output manifest contains the following fields:

  * **audio_filepath (str)**: relative path to the audio files.
  * **text (str)**: transcription.
  * **duration (float)**: audio duration in seconds.

# python main.py --config-path="dataset_configs/arabic/masc" --config-name="config.yaml" dataset_dir=/home/lgrigoryan/data/datasets/arab/masc workspace_dir=/home/lgrigoryan/prog/asr_commonvoice_finetuning/NeMo-speech-data-processor/workdir/masc/${data_split}/ data_split=clean_dev

processors_to_run: "0:"

data_split: ??? # specify dataset type (clean_train, clean_test, ...)
dataset_dir: ???
workspace_dir: ???
manifest_dir: ${workspace_dir}/${data_split}

min_duration: 1 # minimal duration of the segment
max_duration: 20.0 # maximal duration of the segment
min_wordrate: 0.8 # minimal wordrate
max_wordrate: 3 # maximal wordrate

processors:
  # 0 creating manifest {sample_id, audio_path}
  - _target_: sdp.processors.CreateInitialManifestMASC
    dataset_dir: ${dataset_dir}
    data_split: ${data_split}
    output_manifest_file: ${manifest_dir}/manifest0.json

  # # 0 creating manifest {sample_id, audio_path}
  # - _target_: sdp.processors.CreateInitialManifestByExtByCsv
  #   dataset_dir: ${dataset_dir}/audios
  #   csv_file_path: ${dataset_dir}/subsets/${data_split}_with_meta.csv
  #   csv_primary_key: video_id
  #   extension: wav
  #   save_sample_ids: True
  #   output_manifest_sample_id_key: sample_id
  #   output_manifest_result_path_key: raw_audio_file_path
  #   filter_key: dialect
  #   filter_value: ${dialect}
  #   output_manifest_file: ${workspace_dir}/manifest0.json

  # # 1 resampling audios to the same sample rate
  # - _target_: sdp.processors.FfmpegConvert
  #   resampled_audio_dir: ${workspace_dir}/wav
  #   target_samplerate: 16000
  #   target_nchannels: 1
  #   input_file_key: raw_audio_file_path
  #   output_file_key: audio_file_path
  #   output_manifest_file: ${workspace_dir}/manifest1.json

  # # 2 creating manifest {sample_id, vtt_path}
  # - _target_: sdp.processors.CreateInitialManifestByExtByCsv
  #   dataset_dir: ${dataset_dir}/subtitles
  #   csv_file_path: ${dataset_dir}/subsets/${data_split}.csv
  #   csv_primary_key: video_id
  #   extension: ar.vtt
  #   save_sample_ids: True
  #   output_manifest_sample_id_key: sample_id
  #   output_manifest_result_path_key: vtt_file_path
  #   output_manifest_file: ${workspace_dir}/manifest2.json

  # # 3 merging audios manifest with vtts manifest by common key sample_id
  # - _target_: sdp.processors.MergeTwoManifestsByKey
  #   key: sample_id
  #   input_manifest_file2: ${workspace_dir}/manifest1.json
  #   output_manifest_file: ${workspace_dir}/manifest3.json

  # # 4 removing unnecessary fields
  # - _target_: sdp.processors.KeepOnlySpecifiedFields
  #   fields_to_keep: ["sample_id", "audio_file_path", "vtt_file_path"]
  #   output_manifest_file: ${workspace_dir}/manifest4.json

  # # 5 calculating durations
  # - _target_: sdp.processors.GetAudioDuration
  #   audio_file_key: audio_file_path
  #   duration_key: audio_duration
  #   output_manifest_file: ${workspace_dir}/manifest5.json

  # # 6 removing negative durations
  # - _target_: sdp.processors.PreserveByValue
  #   input_value_key: audio_duration
  #   target_value: 0
  #   operator: gt
  #   output_manifest_file: ${workspace_dir}/manifest6.json

  # #TODO: remove numeration from vtts!!!!!!!!!!!
  # # 7 removing numeration from vtt files
  # - _target_: sdp.processors.FilterVttText
  #   regex_params: { "pattern": '^\s*\d+\]', "repl": "" }
  #   input_filepath_key: vtt_file_path
  #   output_filtered_vtt_dir: ${workspace_dir}/filtered_vtt
  #   output_filepath_key: filtered_vtt_file_path
  #   output_manifest_file: ${workspace_dir}/manifest7.json

  # # 8 Gathering all the vtt text
  # - _target_: sdp.processors.datasets.commoncrawl.AllVttText
  #   output_text_key: text
  #   input_filepath_key: vtt_file_path
  #   output_manifest_file: ${workspace_dir}/manifest8.json

  # # # 9 keeping samples that contain at least one punctuation mark
  # # - _target_: "sdp.processors.DropIfNoneOfRegexMatch"
  # #   text_key: text
  # #   regex_patterns:
  # #     ["\\?", "!", ":", ";", "\\-", "\\.", ",", "؟", "،", "؛", "\u06D4"]
  # #     # ["^[^\\?!:;\\-\\.,؟،؛\u06D4]*$"]
  # #   output_manifest_file: ${workspace_dir}/manifest9.json

  # # 10 splitting by vtt
  # # TODO: check if splitting by vtt sentences works better
  # - _target_: sdp.processors.datasets.commoncrawl.SplitByVtt
  #   source_audio_key: audio_file_path
  #   caption_file_key: filtered_vtt_file_path
  #   output_text_key: splitted_vtt_text
  #   output_manifest_file: ${workspace_dir}/manifest10.json

  # # 11 Aggregating segments
  # - _target_: sdp.processors.datasets.youtube.AggregateSegments
  #   source_audio_key: audio_file_path
  #   max_duration: ${max_duration}
  #   output_segments_audio_dir: ${workspace_dir}/audios
  #   output_manifest_file: ${workspace_dir}/manifest11.json

  # # 12 removing unnecessary fields
  # - _target_: sdp.processors.KeepOnlySpecifiedFields
  #   fields_to_keep: ["audio_filepath", "duration", "orig_text"]
  #   output_manifest_file: ${workspace_dir}/manifest12.json

  # # 13 removing samples with empty subtitles for exmaple id=2M6vs0L7Xg0
  # - _target_: sdp.processors.PreserveByValue
  #   input_value_key: orig_text
  #   target_value: ""
  #   operator: ne
  #   output_manifest_file: ${workspace_dir}/manifest13.json

  # # 14 Dropping too short and too long segments
  # - _target_: sdp.processors.DropHighLowDuration
  #   high_duration_threshold: ${max_duration}
  #   low_duration_threshold: ${min_duration}
  #   duration_key: duration
  #   output_manifest_file: ${workspace_dir}/manifest14.json

  # # 15 renaming fields accordingly
  # - _target_: sdp.processors.RenameFields
  #   rename_fields: { "orig_text": "text" }
  #   output_manifest_file: ${workspace_dir}/manifest15.json

  # # 16 replacing eastern arabic numerals with common ones
  # - _target_: sdp.processors.SubRegex
  #   text_key: text
  #   regex_params_list:
  #     - { "pattern": "٠", "repl": "0" }
  #     - { "pattern": "١", "repl": "1" }
  #     - { "pattern": "٢", "repl": "2" }
  #     - { "pattern": "٣", "repl": "3" }
  #     - { "pattern": "٤", "repl": "4" }
  #     - { "pattern": "٥", "repl": "5" }
  #     - { "pattern": "٦", "repl": "6" }
  #     - { "pattern": "٧", "repl": "7" }
  #     - { "pattern": "٨", "repl": "8" }
  #     - { "pattern": "٩", "repl": "9" }
  #   output_manifest_file: ${workspace_dir}/manifest16.json

  # # 17 normalizing arabic numbers
  # - _target_: sdp.processors.NormalizeText
  #   input_text_field: "text"
  #   input_language: "ar"
  #   input_case: "cased"
  #   output_text_field: "text"
  #   output_manifest_file: ${workspace_dir}/manifest17.json

  # # 18 replacing punctuation marks
  # - _target_: sdp.processors.SubRegex
  #   text_key: text
  #   regex_params_list:
  #     - { "pattern": "٠", "repl": "0" }
  #     - { "pattern": "١", "repl": "1" }
  #     - { "pattern": "٢", "repl": "2" }
  #     - { "pattern": "٣", "repl": "3" }
  #     - { "pattern": "٤", "repl": "4" }
  #     - { "pattern": "٥", "repl": "5" }
  #     - { "pattern": "٦", "repl": "6" }
  #     - { "pattern": "٧", "repl": "7" }
  #     - { "pattern": "٨", "repl": "8" }
  #     - { "pattern": "٩", "repl": "9" }
  #     - { "pattern": "&lrm;", "repl": "" }
  #     - { "pattern": "&rlm;", "repl": "" }
  #     - { "pattern": "'", "repl": "" }
  #     - { "pattern": "’", "repl": "" }
  #     - { "pattern": "‘", "repl": "" }
  #     - { "pattern": "’", "repl": "" }
  #     - { "pattern": "‘", "repl": "" }
  #     - { "pattern": "٬", "repl": "" }
  #     - { "pattern": '"', "repl": "" }
  #     - { "pattern": "…", "repl": " " }
  #     - { "pattern": "«", "repl": " " }
  #     - { "pattern": "»", "repl": " " }
  #     - { "pattern": "“", "repl": " " }
  #     - { "pattern": "”", "repl": " " }
  #     - { "pattern": "☭", "repl": "" }
  #     - { "pattern": "•", "repl": "" }
  #     - { "pattern": "\\s+", "repl": " " }
  #     - { "pattern": "\\[\\.\\]+", "repl": "." }
  #     - { "pattern": "\u0670", "repl": "" } # removing small alif
  #     - { "pattern": "\u06CC", "repl": "\u064A" } # replacing arabic letter farsi yeh with yeh
  #     - { "pattern": "\u06A9", "repl": "\u063A" } # replacing arabic letter keheh yeh with kaf
  #   output_manifest_file: ${workspace_dir}/manifest18.json

  # # 19 replacing english punctuation marks with arabic ones
  # - _target_: sdp.processors.SubRegex
  #   text_key: text
  #   regex_params_list:
  #     - { "pattern": ",", "repl": "،" }
  #     - { "pattern": "\\?", "repl": "؟" }
  #     - { "pattern": "-", "repl": " " }
  #     - { "pattern": "؛", "repl": " " }
  #     - { "pattern": ";", "repl": " " }
  #     - { "pattern": ":", "repl": " " }
  #     - { "pattern": "!", "repl": "." }

  #     - { "pattern": "\\s+\\.", "repl": "." }
  #     - { "pattern": "\\s+؟", "repl": "؟" }
  #     - { "pattern": "\\s+:", "repl": ":" }
  #     - { "pattern": "\\s+،", "repl": "،" }
  #     # - { "pattern": "\\s+!", "repl": "!" }
  #     - { "pattern": "\\s+", "repl": " " }

  #     - { "pattern": "\\s+", "repl": " " }
  #     - { "pattern": "\\.+", "repl": "." }
  #     - { "pattern": "،+", "repl": "،" }
  #     # - { "pattern": "!+", "repl": "!" }
  #     - { "pattern": "؟+", "repl": "؟" }
  #     - { "pattern": "،+", "repl": "،" }
  #   output_manifest_file: ${workspace_dir}/manifest19.json
  #   test_cases:
  #     - { input: { text: "..." }, output: { text: "." } }
  #     - { input: { text: "test..." }, output: { text: "test." } }
  #     - { input: { text: "test. . ." }, output: { text: "test." } }
  #     - { input: { text: "test. . . ؟؟؟" }, output: { text: "test.؟" } }
  #     - { input: { text: "test-test" }, output: { text: "test test" } }
  #     - { input: { text: "test ." }, output: { text: "test." } }

  # # 20 removing punctuation, diacritics, dotted letters and tatweel
  # - _target_: sdp.processors.ArabicTextPreprocessor
  #   input_text_key: text
  #   remove_diacritics: True
  #   remove_punctuation: False
  #   remove_tatweel: True
  #   normalize_ligature: True
  #   output_manifest_file: ${workspace_dir}/manifest20.json

  # # 21 removing high low wordrate samples
  # - _target_: sdp.processors.DropHighLowWordrate
  #   text_key: text
  #   high_wordrate_threshold: ${max_wordrate}
  #   low_wordrate_threshold: ${min_wordrate}
  #   output_manifest_file: ${workspace_dir}/manifest21.json

  # # 22 dropping non alphabetical symbols
  # - _target_: sdp.processors.DropNonAlphabet
  #   alphabet: "؟.، \u0631\u0630\u062F\u062E\u062D\u062C\u062B\u062A\u0629\u0628\u0627\u0626\u0625\u0624\u0623\u0622\u0621\u064A\u0649\u0648\u0647\u0646\u0645\u0644\u0643\u0642\u0641\u063A\u0639\u0638\u0637\u0636\u0635\u0634\u0633\u0632\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652"
  #   # alphabet: " \u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A"
  #   # alphabet: " \u0627\u0628\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u064A \u0621"
  #   output_manifest_file: ${workspace_dir}/manifest22.json

  # # 23 changing paths to relative
  # - _target_: sdp.processors.ChangeToRelativePath
  #   base_dir: ${workspace_dir}
  #   output_manifest_file: ${workspace_dir}/manifest.json
